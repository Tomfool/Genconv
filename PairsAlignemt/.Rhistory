library.result
dmvnorm.lowrank <- function(y, mu, Z, sigma0, sigma1, log = FALSE){
n <- dim(Z)[1]
q <- dim(Z)[2]
ZT.Z <- t(Z) %*% Z
sigma.inv <- sigma0^-2 * diag(n) - sigma0^-4 * sigma1^2 * Z %*% solve( diag(q) + sigma0^-2*sigma1^2 * ZT.Z ) %*% t(Z)
sigma.det.log <- log(sigma0)*(2*n) + log( det( diag(q) + sigma0^-2 * sigma1^2 * ZT.Z ) )
result <- -n*0.5*log(2*pi) - 0.5*sigma.det.log - 0.5*t( y - mu ) %*% sigma.inv %*% ( y - mu )
if (log) {
return (result)
}
else {
return ( exp(result) )
}
}
n <- 500
q <- 5
y <- matrix( rnorm(n*1, mean = 5.0, sd = 1.0), n, 1)
mu <- matrix( rnorm(n*1, mean = 3.0, sd = 1.0), n, 1)
Z <- matrix( rnorm(n*q, mean = 4.0, sd = 1.0), n, q)
sigma0 <- rexp( n = 1, rate = 0.5 )
sigma1 <- rexp( n = 1, rate = 1.5 )
system.time(my.result <- dmvnorm.lowrank(y, mu, Z, sigma0, sigma1, log = TRUE))
library(mvtnorm)
sigma <- sigma0^2*diag(dim(Z)[1]) + sigma1^2 * Z %*% t(Z)
system.time(library.result <- dmvnorm(y[,1], mu[,1], sigma, log = TRUE))
my.result
library.result
dmvnorm.lowrank <- function(y, mu, Z, sigma0, sigma1, log = FALSE){
n <- dim(Z)[1]
q <- dim(Z)[2]
ZT.Z <- t(Z) %*% Z
sigma.inv <- sigma0^-2 * diag(n) - sigma0^-4 * sigma1^2 * Z %*% solve( diag(q) + sigma0^-2*sigma1^2 * ZT.Z ) %*% t(Z)
sigma.det.log <- log(sigma0)*(2*n) + log( det( diag(q) + sigma0^-2 * sigma1^2 * ZT.Z ) )
result <- -n*0.5*log(2*pi) - 0.5*sigma.det.log - 0.5*t( y - mu ) %*% sigma.inv %*% ( y - mu )
if (log) {
return (result)
}
else {
return ( exp(result) )
}
}
n <- 500
q <- 5
y <- matrix( rnorm(n*1, mean = 5.0, sd = 1.0), n, 1)
mu <- matrix( rnorm(n*1, mean = 3.0, sd = 1.0), n, 1)
Z <- matrix( rnorm(n*q, mean = 4.0, sd = 1.0), n, q)
sigma0 <- rexp( n = 1, rate = 0.5 )
sigma1 <- rexp( n = 1, rate = 1.5 )
system.time(my.result <- dmvnorm.lowrank(y, mu, Z, sigma0, sigma1, log = TRUE))
library(mvtnorm)
sigma <- sigma0^2*diag(dim(Z)[1]) + sigma1^2 * Z %*% t(Z)
system.time(library.result <- dmvnorm(y[,1], mu[,1], sigma, log = TRUE))
my.result
library.result
dmvnorm.lowrank <- function(y, mu, Z, sigma0, sigma1, log = FALSE){
n <- dim(Z)[1]
q <- dim(Z)[2]
ZT.Z <- t(Z) %*% Z
sigma.inv <- sigma0^-2 * diag(n) - sigma0^-4 * sigma1^2 * Z %*% solve( diag(q) + sigma0^-2*sigma1^2 * ZT.Z ) %*% t(Z)
sigma.det.log <- log(sigma0)*(2*n) + log( det( diag(q) + sigma0^-2 * sigma1^2 * ZT.Z ) )
result <- -n*0.5*log(2*pi) - 0.5*sigma.det.log - 0.5*t( y - mu ) %*% sigma.inv %*% ( y - mu )
if (log) {
return (result)
}
else {
return ( exp(result) )
}
}
n <- 500
q <- 5
y <- matrix( rnorm(n*1, mean = 5.0, sd = 1.0), n, 1)
mu <- matrix( rnorm(n*1, mean = 3.0, sd = 1.0), n, 1)
Z <- matrix( rnorm(n*q, mean = 4.0, sd = 1.0), n, q)
sigma0 <- rexp( n = 1, rate = 0.5 )
sigma1 <- rexp( n = 1, rate = 1.5 )
system.time(my.result <- dmvnorm.lowrank(y, mu, Z, sigma0, sigma1, log = TRUE))
library(mvtnorm)
sigma <- sigma0^2*diag(dim(Z)[1]) + sigma1^2 * Z %*% t(Z)
system.time(library.result <- dmvnorm(y[,1], mu[,1], sigma, log = TRUE))
my.result
library.result
dmvnorm.lowrank <- function(y, mu, Z, sigma0, sigma1, log = FALSE){
n <- dim(Z)[1]
q <- dim(Z)[2]
ZT.Z <- t(Z) %*% Z
sigma.inv <- sigma0^-2 * diag(n) - sigma0^-4 * sigma1^2 * Z %*% solve( diag(q) + sigma0^-2*sigma1^2 * ZT.Z ) %*% t(Z)
sigma.det.log <- log(sigma0)*(2*n) + log( det( diag(q) + sigma0^-2 * sigma1^2 * ZT.Z ) )
result <- -n*0.5*log(2*pi) - 0.5*sigma.det.log - 0.5*t( y - mu ) %*% sigma.inv %*% ( y - mu )
if (log) {
return (result)
}
else {
return ( exp(result) )
}
}
n <- 500
q <- 5
y <- matrix( rnorm(n*1, mean = 5.0, sd = 1.0), n, 1)
mu <- matrix( rnorm(n*1, mean = 3.0, sd = 1.0), n, 1)
Z <- matrix( rnorm(n*q, mean = 4.0, sd = 1.0), n, q)
sigma0 <- rexp( n = 1, rate = 0.5 )
sigma1 <- rexp( n = 1, rate = 1.5 )
system.time(my.result <- dmvnorm.lowrank(y, mu, Z, sigma0, sigma1, log = TRUE))
library(mvtnorm)
sigma <- sigma0^2*diag(dim(Z)[1]) + sigma1^2 * Z %*% t(Z)
system.time(library.result <- dmvnorm(y[,1], mu[,1], sigma, log = TRUE))
my.result
library.result
dmvnorm.lowrank <- function(y, mu, Z, sigma0, sigma1, log = FALSE){
n <- dim(Z)[1]
q <- dim(Z)[2]
ZT.Z <- t(Z) %*% Z
sigma.inv <- sigma0^-2 * diag(n) - sigma0^-4 * sigma1^2 * Z %*% solve( diag(q) + sigma0^-2*sigma1^2 * ZT.Z ) %*% t(Z)
sigma.det.log <- log(sigma0)*(2*n) + log( det( diag(q) + sigma0^-2 * sigma1^2 * ZT.Z ) )
result <- -n*0.5*log(2*pi) - 0.5*sigma.det.log - 0.5*t( y - mu ) %*% sigma.inv %*% ( y - mu )
if (log) {
return (result)
}
else {
return ( exp(result) )
}
}
n <- 500
q <- 5
y <- matrix( rnorm(n*1, mean = 5.0, sd = 1.0), n, 1)
mu <- matrix( rnorm(n*1, mean = 3.0, sd = 1.0), n, 1)
Z <- matrix( rnorm(n*q, mean = 4.0, sd = 1.0), n, q)
sigma0 <- rexp( n = 1, rate = 0.5 )
sigma1 <- rexp( n = 1, rate = 1.5 )
system.time(my.result <- dmvnorm.lowrank(y, mu, Z, sigma0, sigma1, log = TRUE))
library(mvtnorm)
sigma <- sigma0^2*diag(dim(Z)[1]) + sigma1^2 * Z %*% t(Z)
system.time(library.result <- dmvnorm(y[,1], mu[,1], sigma, log = TRUE))
my.result
library.result
dmvnorm.lowrank <- function(y, mu, Z, sigma0, sigma1, log = FALSE){
n <- dim(Z)[1]
q <- dim(Z)[2]
ZT.Z <- t(Z) %*% Z
sigma.inv <- sigma0^-2 * diag(n) - sigma0^-4 * sigma1^2 * Z %*% solve( diag(q) + sigma0^-2*sigma1^2 * ZT.Z ) %*% t(Z)
sigma.det.log <- log(sigma0)*(2*n) + log( det( diag(q) + sigma0^-2 * sigma1^2 * ZT.Z ) )
result <- -n*0.5*log(2*pi) - 0.5*sigma.det.log - 0.5*t( y - mu ) %*% sigma.inv %*% ( y - mu )
if (log) {
return (result)
}
else {
return ( exp(result) )
}
}
n <- 500
q <- 5
y <- matrix( rnorm(n*1, mean = 5.0, sd = 1.0), n, 1)
mu <- matrix( rnorm(n*1, mean = 3.0, sd = 1.0), n, 1)
Z <- matrix( rnorm(n*q, mean = 4.0, sd = 1.0), n, q)
sigma0 <- rexp( n = 1, rate = 0.5 )
sigma1 <- rexp( n = 1, rate = 1.5 )
system.time(my.result <- dmvnorm.lowrank(y, mu, Z, sigma0, sigma1, log = TRUE))
library(mvtnorm)
sigma <- sigma0^2*diag(dim(Z)[1]) + sigma1^2 * Z %*% t(Z)
system.time(library.result <- dmvnorm(y[,1], mu[,1], sigma, log = TRUE))
my.result
library.result
dmvnorm.lowrank <- function(y, mu, Z, sigma0, sigma1, log = FALSE){
n <- dim(Z)[1]
q <- dim(Z)[2]
ZT.Z <- t(Z) %*% Z
sigma.inv <- sigma0^-2 * diag(n) - sigma0^-4 * sigma1^2 * Z %*% solve( diag(q) + sigma0^-2*sigma1^2 * ZT.Z ) %*% t(Z)
sigma.det.log <- log(sigma0)*(2*n) + log( det( diag(q) + sigma0^-2 * sigma1^2 * ZT.Z ) )
result <- -n*0.5*log(2*pi) - 0.5*sigma.det.log - 0.5*t( y - mu ) %*% sigma.inv %*% ( y - mu )
if (log) {
return (result)
}
else {
return ( exp(result) )
}
}
n <- 500
q <- 5
y <- matrix( rnorm(n*1, mean = 5.0, sd = 1.0), n, 1)
mu <- matrix( rnorm(n*1, mean = 3.0, sd = 1.0), n, 1)
Z <- matrix( rnorm(n*q, mean = 4.0, sd = 1.0), n, q)
sigma0 <- rexp( n = 1, rate = 0.5 )
sigma1 <- rexp( n = 1, rate = 1.5 )
system.time(my.result <- dmvnorm.lowrank(y, mu, Z, sigma0, sigma1, log = TRUE))
library(mvtnorm)
sigma <- sigma0^2*diag(dim(Z)[1]) + sigma1^2 * Z %*% t(Z)
system.time(library.result <- dmvnorm(y[,1], mu[,1], sigma, log = TRUE))
my.result
library.result
dmvnorm.lowrank <- function(y, mu, Z, sigma0, sigma1, log = FALSE){
n <- dim(Z)[1]
q <- dim(Z)[2]
ZT.Z <- t(Z) %*% Z
sigma.inv <- sigma0^-2 * diag(n) - sigma0^-4 * sigma1^2 * Z %*% solve( diag(q) + sigma0^-2*sigma1^2 * ZT.Z ) %*% t(Z)
sigma.det.log <- log(sigma0)*(2*n) + log( det( diag(q) + sigma0^-2 * sigma1^2 * ZT.Z ) )
result <- -n*0.5*log(2*pi) - 0.5*sigma.det.log - 0.5*t( y - mu ) %*% sigma.inv %*% ( y - mu )
if (log) {
return (result)
}
else {
return ( exp(result) )
}
}
n <- 500
q <- 5
y <- matrix( rnorm(n*1, mean = 5.0, sd = 1.0), n, 1)
mu <- matrix( rnorm(n*1, mean = 3.0, sd = 1.0), n, 1)
Z <- matrix( rnorm(n*q, mean = 4.0, sd = 1.0), n, q)
sigma0 <- rexp( n = 1, rate = 0.5 )
sigma1 <- rexp( n = 1, rate = 1.5 )
system.time(my.result <- dmvnorm.lowrank(y, mu, Z, sigma0, sigma1, log = TRUE))
library(mvtnorm)
sigma <- sigma0^2*diag(dim(Z)[1]) + sigma1^2 * Z %*% t(Z)
system.time(library.result <- dmvnorm(y[,1], mu[,1], sigma, log = TRUE))
my.result
library.result
dmvnorm.lowrank <- function(y, mu, Z, sigma0, sigma1, log = FALSE){
n <- dim(Z)[1]
q <- dim(Z)[2]
ZT.Z <- t(Z) %*% Z
sigma.inv <- sigma0^-2 * diag(n) - sigma0^-4 * sigma1^2 * Z %*% solve( diag(q) + sigma0^-2*sigma1^2 * ZT.Z ) %*% t(Z)
sigma.det.log <- log(sigma0)*(2*n) + log( det( diag(q) + sigma0^-2 * sigma1^2 * ZT.Z ) )
result <- -n*0.5*log(2*pi) - 0.5*sigma.det.log - 0.5*t( y - mu ) %*% sigma.inv %*% ( y - mu )
if (log) {
return (result)
}
else {
return ( exp(result) )
}
}
n <- 500
q <- 5
y <- matrix( rnorm(n*1, mean = 5.0, sd = 1.0), n, 1)
mu <- matrix( rnorm(n*1, mean = 3.0, sd = 1.0), n, 1)
Z <- matrix( rnorm(n*q, mean = 4.0, sd = 1.0), n, q)
sigma0 <- rexp( n = 1, rate = 0.5 )
sigma1 <- rexp( n = 1, rate = 1.5 )
system.time(my.result <- dmvnorm.lowrank(y, mu, Z, sigma0, sigma1, log = TRUE))
library(mvtnorm)
sigma <- sigma0^2*diag(dim(Z)[1]) + sigma1^2 * Z %*% t(Z)
system.time(library.result <- dmvnorm(y[,1], mu[,1], sigma, log = TRUE))
my.result
library.result
dmvnorm.lowrank <- function(y, mu, Z, sigma0, sigma1, log = FALSE){
n <- dim(Z)[1]
q <- dim(Z)[2]
ZT.Z <- t(Z) %*% Z
sigma.inv <- sigma0^-2 * diag(n) - sigma0^-4 * sigma1^2 * Z %*% solve( diag(q) + sigma0^-2*sigma1^2 * ZT.Z ) %*% t(Z)
sigma.det.log <- log(sigma0)*(2*n) + log( det( diag(q) + sigma0^-2 * sigma1^2 * ZT.Z ) )
result <- -n*0.5*log(2*pi) - 0.5*sigma.det.log - 0.5*t( y - mu ) %*% sigma.inv %*% ( y - mu )
if (log) {
return (result)
}
else {
return ( exp(result) )
}
}
n <- 500
q <- 5
y <- matrix( rnorm(n*1, mean = 5.0, sd = 1.0), n, 1)
mu <- matrix( rnorm(n*1, mean = 3.0, sd = 1.0), n, 1)
Z <- matrix( rnorm(n*q, mean = 4.0, sd = 1.0), n, q)
sigma0 <- rexp( n = 1, rate = 0.5 )
sigma1 <- rexp( n = 1, rate = 1.5 )
system.time(my.result <- dmvnorm.lowrank(y, mu, Z, sigma0, sigma1, log = TRUE))
library(mvtnorm)
sigma <- sigma0^2*diag(dim(Z)[1]) + sigma1^2 * Z %*% t(Z)
system.time(library.result <- dmvnorm(y[,1], mu[,1], sigma, log = TRUE))
my.result
library.result
dmvnorm.lowrank <- function(y, mu, Z, sigma0, sigma1, log = FALSE){
n <- dim(Z)[1]
q <- dim(Z)[2]
ZT.Z <- t(Z) %*% Z
sigma.inv <- sigma0^-2 * diag(n) - sigma0^-4 * sigma1^2 * Z %*% solve( diag(q) + sigma0^-2*sigma1^2 * ZT.Z ) %*% t(Z)
sigma.det.log <- log(sigma0)*(2*n) + log( det( diag(q) + sigma0^-2 * sigma1^2 * ZT.Z ) )
result <- -n*0.5*log(2*pi) - 0.5*sigma.det.log - 0.5*t( y - mu ) %*% sigma.inv %*% ( y - mu )
if (log) {
return (result)
}
else {
return ( exp(result) )
}
}
n <- 500
q <- 5
y <- matrix( rnorm(n*1, mean = 5.0, sd = 1.0), n, 1)
mu <- matrix( rnorm(n*1, mean = 3.0, sd = 1.0), n, 1)
Z <- matrix( rnorm(n*q, mean = 4.0, sd = 1.0), n, q)
sigma0 <- rexp( n = 1, rate = 0.5 )
sigma1 <- rexp( n = 1, rate = 1.5 )
system.time(my.result <- dmvnorm.lowrank(y, mu, Z, sigma0, sigma1, log = TRUE))
library(mvtnorm)
sigma <- sigma0^2*diag(dim(Z)[1]) + sigma1^2 * Z %*% t(Z)
system.time(library.result <- dmvnorm(y[,1], mu[,1], sigma, log = TRUE))
my.result
library.result
dmvnorm.lowrank <- function(y, mu, Z, sigma0, sigma1, log = FALSE){
n <- dim(Z)[1]
q <- dim(Z)[2]
ZT.Z <- t(Z) %*% Z
sigma.inv <- sigma0^-2 * diag(n) - sigma0^-4 * sigma1^2 * Z %*% solve( diag(q) + sigma0^-2*sigma1^2 * ZT.Z ) %*% t(Z)
sigma.det.log <- log(sigma0)*(2*n) + log( det( diag(q) + sigma0^-2 * sigma1^2 * ZT.Z ) )
result <- -n*0.5*log(2*pi) - 0.5*sigma.det.log - 0.5*t( y - mu ) %*% sigma.inv %*% ( y - mu )
if (log) {
return (result)
}
else {
return ( exp(result) )
}
}
n <- 500
q <- 5
y <- matrix( rnorm(n*1, mean = 5.0, sd = 1.0), n, 1)
mu <- matrix( rnorm(n*1, mean = 3.0, sd = 1.0), n, 1)
Z <- matrix( rnorm(n*q, mean = 4.0, sd = 1.0), n, q)
sigma0 <- rexp( n = 1, rate = 0.5 )
sigma1 <- rexp( n = 1, rate = 1.5 )
system.time(my.result <- dmvnorm.lowrank(y, mu, Z, sigma0, sigma1, log = TRUE))
library(mvtnorm)
sigma <- sigma0^2*diag(dim(Z)[1]) + sigma1^2 * Z %*% t(Z)
system.time(library.result <- dmvnorm(y[,1], mu[,1], sigma, log = TRUE))
my.result
library.result
dmvnorm.lowrank <- function(y, mu, Z, sigma0, sigma1, log = FALSE){
n <- dim(Z)[1]
q <- dim(Z)[2]
ZT.Z <- t(Z) %*% Z
sigma.inv <- sigma0^-2 * diag(n) - sigma0^-4 * sigma1^2 * Z %*% solve( diag(q) + sigma0^-2*sigma1^2 * ZT.Z ) %*% t(Z)
sigma.det.log <- log(sigma0)*(2*n) + log( det( diag(q) + sigma0^-2 * sigma1^2 * ZT.Z ) )
result <- -n*0.5*log(2*pi) - 0.5*sigma.det.log - 0.5*t( y - mu ) %*% sigma.inv %*% ( y - mu )
if (log) {
return (result)
}
else {
return ( exp(result) )
}
}
n <- 500
q <- 5
y <- matrix( rnorm(n*1, mean = 5.0, sd = 1.0), n, 1)
mu <- matrix( rnorm(n*1, mean = 3.0, sd = 1.0), n, 1)
Z <- matrix( rnorm(n*q, mean = 4.0, sd = 1.0), n, q)
sigma0 <- rexp( n = 1, rate = 0.5 )
sigma1 <- rexp( n = 1, rate = 1.5 )
system.time(my.result <- dmvnorm.lowrank(y, mu, Z, sigma0, sigma1, log = TRUE))
library(mvtnorm)
sigma <- sigma0^2*diag(dim(Z)[1]) + sigma1^2 * Z %*% t(Z)
system.time(library.result <- dmvnorm(y[,1], mu[,1], sigma, log = TRUE))
my.result
library.result
dmvnorm.lowrank <- function(y, mu, Z, sigma0, sigma1, log = FALSE){
n <- dim(Z)[1]
q <- dim(Z)[2]
ZT.Z <- t(Z) %*% Z
sigma.inv <- sigma0^-2 * diag(n) - sigma0^-4 * sigma1^2 * Z %*% solve( diag(q) + sigma0^-2*sigma1^2 * ZT.Z ) %*% t(Z)
sigma.det.log <- log(sigma0)*(2*n) + log( det( diag(q) + sigma0^-2 * sigma1^2 * ZT.Z ) )
result <- -n*0.5*log(2*pi) - 0.5*sigma.det.log - 0.5*t( y - mu ) %*% sigma.inv %*% ( y - mu )
if (log) {
return (result)
}
else {
return ( exp(result) )
}
}
n <- 500
q <- 5
y <- matrix( rnorm(n*1, mean = 5.0, sd = 1.0), n, 1)
mu <- matrix( rnorm(n*1, mean = 3.0, sd = 1.0), n, 1)
Z <- matrix( rnorm(n*q, mean = 4.0, sd = 1.0), n, q)
sigma0 <- rexp( n = 1, rate = 0.5 )
sigma1 <- rexp( n = 1, rate = 1.5 )
system.time(my.result <- dmvnorm.lowrank(y, mu, Z, sigma0, sigma1, log = TRUE))
library(mvtnorm)
sigma <- sigma0^2*diag(dim(Z)[1]) + sigma1^2 * Z %*% t(Z)
system.time(library.result <- dmvnorm(y[,1], mu[,1], sigma, log = TRUE))
my.result
library.result
eigen
requir(BLAS)
require(BLAS)
library
library()
BLAS()
blas
BLAS
packages()
package
package()
solve.power <- function(A, k, b){
require("Matrix")
lu2 <- lu(A)  # LU decomposition using Matrix package
L <- expand(lu2)$L
U <- expand(lu2)$U
P <- expand(lu2)$P  # pivoting matrix P that P %*% L %*% U = A
kInverse.P <- solve(P)
y <- b
for (i in 1:k){
y <- forwardsolve( L, kInverse.P %*% y )
y <- backsolve( U, y )
}
return (y)
}
n <- 1000
A <- matrix( rnorm(n*n, mean = 5.0, sd = 1.0), n, n)
b <- matrix( rnorm(n*1, mean = 5.0, sd = 1.0), n, 1)
require(expm)
k <- 3
system.time(x <- solve.power(A, k, b))  # time spent
system.time(xx <- solve(A %^% k, b))
solve.power <- function(A, k, b){
require("Matrix")
lu2 <- lu(A)  # LU decomposition using Matrix package
L <- expand(lu2)$L
U <- expand(lu2)$U
P <- expand(lu2)$P  # pivoting matrix P that P %*% L %*% U = A
kInverse.P <- solve(P)
y <- b
for (i in 1:k){
y <- forwardsolve( L, kInverse.P %*% y )
y <- backsolve( U, y )
}
return (y)
}
n <- 3000
A <- matrix( rnorm(n*n, mean = 5.0, sd = 1.0), n, n)
b <- matrix( rnorm(n*1, mean = 5.0, sd = 1.0), n, 1)
require(expm)
k <- 3
system.time(x <- solve.power(A, k, b))  # time spent
system.time(xx <- solve(A %^% k, b))
source('~/PairsAlignment/Summary.R', echo=TRUE)
View(est)
View(est)
hist( RF_logL-R0_logL, data=est )
hist( (RF_logL-R0_logL), data=est )
hist( est$RF_logL-est$R0_logL )
hist( est$R0_logL-est$RF_logL )
hist( est$R0_logL-est$RF_logL )
View(est)
View(est)
a <- est$R0_logL-est$RF_logL
summary(a)
plot( R0_logL-RF_logL, data=est )
source('~/PairsAlignment/Summary.R', echo=TRUE)
plot( (RF_logL-R0_logL)~length,data=est )
plot( (R0_logL-RF_logL)~length,data=est )
hist( (R0_logL-RF_logL), data=est )
plot( (U0_logL-UF_logL)~length,data=est )
title( main = "Increased LogLikelihood for UnRooted Tree topology")
source('~/PairsAlignment/Summary.R', echo=TRUE)
source('~/PairsAlignment/Summary.R', echo=TRUE)
plot(R_Tau~length,data=est, main = "Estimated Tau value for Rooted Tree topology", xlab = "Sequence Length", ylab = "Tau")
source('~/PairsAlignment/Summary.R', echo=TRUE)
xlab = "Sequence Length", ylab = "delta_lnL", ylim = c( 0.0, 300.0))
xlab = "Sequence Length", ylab = "delta_lnL")
plot( (U0_logL-UF_logL)~length,data=est,
plot.window( ylim = c( 0.0, 300.0) )
)
plot( (R0_logL-RF_logL)~length,data=est,
)
plot( (R0_logL-RF_logL)~length,data=est,
main = "Increased LogLikelihood for Rooted Tree topology",
xlab = "Sequence Length", ylab = "delta_lnL")
plot.window( ylim = c( 0.0, 300.0) )
plot( (R0_logL-RF_logL)~length,data=est,
main = "Increased LogLikelihood for Rooted Tree topology",
xlab = "Sequence Length", ylab = "delta_lnL")
plot.window( xlim = c(100.0, 3000.0), ylim = c( 0.0, 300.0) )
plot( (R0_logL-RF_logL)~length,data=est,
main = "Increased LogLikelihood for Rooted Tree topology",
xlab = "Sequence Length", ylab = "delta_lnL")
plot.window( xlim = c(100.0, 3000.0), ylim = c( 0.0, 300.0) )
plot( (R0_logL-RF_logL)~length,data=est,
main = "Increased LogLikelihood for Rooted Tree topology",
xlab = "Sequence Length", ylab = "delta_lnL")
source('~/PairsAlignment/Summary.R', echo=TRUE)
source('~/PairsAlignment/Summary.R', echo=TRUE)
source('~/PairsAlignment/Summary.R', echo=TRUE)
summary(a)
plot( (U0_logL-UF_logL)~length,data=est,
main = "Increased LogLikelihood for UnRooted Tree topology",
xlab = "Sequence Length", ylab = "delta_lnL")
text( summary(U0_logL-UF_logL) )
plot( (U0_logL-UF_logL)~length,data=est,
main = "Increased LogLikelihood for UnRooted Tree topology",
xlab = "Sequence Length", ylab = "delta_lnL")
text( summary(U0_logL-UF_logL, data=est) )
plot( (U0_logL-UF_logL)~length,data=est,
main = "Increased LogLikelihood for UnRooted Tree topology",
xlab = "Sequence Length", ylab = "delta_lnL")
text( summary(est$U0_logL-est$UF_logL) )
U.summary <- summary(est$U0_logL-est$UF_logL)
U.summary
U.summary$mean
U.summary$Mean
expand(U.summary)$Mean
text(1.5, 150, paste(U.summary), pos = 4)
plot( (U0_logL-UF_logL)~length,data=est,
main = "Increased LogLikelihood for UnRooted Tree topology",
xlab = "Sequence Length", ylab = "delta_lnL")
U.summary <- summary(est$U0_logL-est$UF_logL)
text(1.5, 150, paste(U.summary), pos = 4)
text(30, 150, paste(U.summary), pos = 4)
text(3000, 150, paste(U.summary), pos = 4)
source('~/PairsAlignment/Summary.R', echo=TRUE)
source('~/PairsAlignment/Summary.R', echo=TRUE)
source('~/PairsAlignment/Summary.R', echo=TRUE)
source('~/PairsAlignment/Summary.R', echo=TRUE)
U.summary
R.summary
