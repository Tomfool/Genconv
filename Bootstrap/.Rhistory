check.sub <- function(delta.xl, L){
delta.table <- table(delta.xl)
L.table <- table(L)
if (all(rownames(delta.table) %in% rownames(L.table))){
return (all(as.numeric(delta.table) <= as.numeric(L.table[rownames(delta.table)])))
}
else return (FALSE)
}
test.L <- c(2, 2, 3, 3, 4, 5, 6, 7, 8)#, 10)
X <- c(0, 10)
a <- Place(test.L,X, 10, c())
PartialDigest <- function(L){
width <- max(L)
X <- c(0, width)
Place(L[-which.max(L)], X, width)
}
Place <- function(L, X, width, sol){
if(length(L) == 0) {
sol <- rbind(sol, X)
print("output")
print(X)
print(sol)
return(sol)
}
y <- max(L)
delta.yl <- abs(X - y)
if (check.sub(delta.yl, L)){
X <- c(X, y)
for (i in delta.yl){
L <- L[-which(L == i)[1]]
}
print("L in case 1")
print(L)
print(X)
sol <- Place(L, X, width, sol)
X <- X[-which(X == y)[1]]
L <- c(L, delta.yl)
}
delta.wyl <- abs(X - width + y)
if (check.sub(delta.wyl, L)){
X <- c(X, width - y)
for (i in delta.wyl){
L <- L[-which(L == i)[1]]
}
#     print("L in case 1")
#     print(L)
#     print(X)
sol <- Place(L, X, width, sol)
X <- X[-which(X == width - y)[1]]
L <- c(L, delta.wyl)
return(sol)
}
}
check.sub <- function(delta.xl, L){
delta.table <- table(delta.xl)
L.table <- table(L)
if (all(rownames(delta.table) %in% rownames(L.table))){
return (all(as.numeric(delta.table) <= as.numeric(L.table[rownames(delta.table)])))
}
else return (FALSE)
}
test.L <- c(2, 2, 3, 3, 4, 5, 6, 7, 8)#, 10)
X <- c(0, 10)
a <- Place(test.L,X, 10, c())
a
a <- Place(test.L,X, 10, a)
PartialDigest <- function(L){
width <- max(L)
X <- c(0, width)
Place(L[-which.max(L)], X, width)
}
Place <- function(L, X, width, sol){
if(length(L) == 0) {
sol <- rbind(sol, X)
print("output")
print(X)
print(sol)
return(sol)
}
y <- max(L)
delta.yl <- abs(X - y)
if (check.sub(delta.yl, L)){
X <- c(X, y)
for (i in delta.yl){
L <- L[-which(L == i)[1]]
}
print("L in case 1")
print(L)
print(X)
sol <- Place(L, X, width, sol)
X <- X[-which(X == y)[1]]
L <- c(L, delta.yl)
}
delta.wyl <- abs(X - width + y)
if (check.sub(delta.wyl, L)){
X <- c(X, width - y)
for (i in delta.wyl){
L <- L[-which(L == i)[1]]
}
#     print("L in case 1")
#     print(L)
#     print(X)
sol <- Place(L, X, width, sol)
X <- X[-which(X == width - y)[1]]
L <- c(L, delta.wyl)
return(sol)
}
}
check.sub <- function(delta.xl, L){
delta.table <- table(delta.xl)
L.table <- table(L)
if (all(rownames(delta.table) %in% rownames(L.table))){
return (all(as.numeric(delta.table) <= as.numeric(L.table[rownames(delta.table)])))
}
else return (FALSE)
}
test.L <- c(2, 2, 3, 3, 4, 5, 6, 7, 8)#, 10)
X <- c(0, 10)
a <- c()
a <- Place(test.L,X, 10, a)
a
PartialDigest <- function(L){
width <- max(L)
X <- c(0, width)
Place(L[-which.max(L)], X, width)
}
Place <- function(L, X, width, sol){
if(length(L) == 0) {
sol <- rbind(sol, X)
print("output")
print(X)
print(sol)
return(sol)
}
y <- max(L)
delta.yl <- abs(X - y)
if (check.sub(delta.yl, L)){
X <- c(X, y)
for (i in delta.yl){
L <- L[-which(L == i)[1]]
}
print("L in case 1")
print(L)
print(X)
sol <- Place(L, X, width, sol)
X <- X[-which(X == y)[1]]
L <- c(L, delta.yl)
}
delta.wyl <- abs(X - width + y)
if (check.sub(delta.wyl, L)){
X <- c(X, width - y)
for (i in delta.wyl){
L <- L[-which(L == i)[1]]
}
#     print("L in case 1")
#     print(L)
#     print(X)
sol <- Place(L, X, width, sol)
X <- X[-which(X == width - y)[1]]
L <- c(L, delta.wyl)
return(sol)
}
}
check.sub <- function(delta.xl, L){
delta.table <- table(delta.xl)
L.table <- table(L)
if (all(rownames(delta.table) %in% rownames(L.table))){
return (all(as.numeric(delta.table) <= as.numeric(L.table[rownames(delta.table)])))
}
else return (FALSE)
}
test.L <- c(2, 2, 3, 3, 4, 5, 6, 7, 8)#, 10)
X <- c(0, 10)
a <- c()
a <- Place(test.L,X, 10, a)
PartialDigest <- function(L){
width <- max(L)
X <- c(0, width)
Place(L[-which.max(L)], X, width)
}
Place <- function(L, X, width, sol){
if(length(L) == 0) {
sol <- rbind(sol, X)
print("output")
print(X)
print(sol)
return(sol)
}
y <- max(L)
delta.yl <- abs(X - y)
if (check.sub(delta.yl, L)){
X <- c(X, y)
for (i in delta.yl){
L <- L[-which(L == i)[1]]
}
#     print("L in case 1")
#     print(L)
#     print(X)
sol <- Place(L, X, width, sol)
X <- X[-which(X == y)[1]]
L <- c(L, delta.yl)
}
delta.wyl <- abs(X - width + y)
if (check.sub(delta.wyl, L)){
X <- c(X, width - y)
for (i in delta.wyl){
L <- L[-which(L == i)[1]]
}
#     print("L in case 1")
#     print(L)
#     print(X)
sol <- Place(L, X, width, sol)
X <- X[-which(X == width - y)[1]]
L <- c(L, delta.wyl)
return(sol)
}
}
check.sub <- function(delta.xl, L){
delta.table <- table(delta.xl)
L.table <- table(L)
if (all(rownames(delta.table) %in% rownames(L.table))){
return (all(as.numeric(delta.table) <= as.numeric(L.table[rownames(delta.table)])))
}
else return (FALSE)
}
test.L <- c(2, 2, 3, 3, 4, 5, 6, 7, 8)#, 10)
X <- c(0, 10)
a <- c()
a <- Place(test.L,X, 10, a)
PartialDigest <- function(L){
width <- max(L)
X <- c(0, width)
Place(L[-which.max(L)], X, width)
}
Place <- function(L, X, width, sol){
if(length(L) == 0) {
sol <- rbind(sol, X)
print("output")
print(X)
print(sol)
return(sol)
}
y <- max(L)
delta.yl <- abs(X - y)
if (check.sub(delta.yl, L)){
X <- c(X, y)
for (i in delta.yl){
L <- L[-which(L == i)[1]]
}
#     print("L in case 1")
#     print(L)
#     print(X)
sol <- Place(L, X, width, sol)
X <- X[-which(X == y)[1]]
L <- c(L, delta.yl)
}
delta.wyl <- abs(X - width + y)
if (check.sub(delta.wyl, L)){
X <- c(X, width - y)
for (i in delta.wyl){
L <- L[-which(L == i)[1]]
}
#     print("L in case 1")
#     print(L)
#     print(X)
sol <- Place(L, X, width, sol)
X <- X[-which(X == width - y)[1]]
L <- c(L, delta.wyl)
}
return(sol)
}
check.sub <- function(delta.xl, L){
delta.table <- table(delta.xl)
L.table <- table(L)
if (all(rownames(delta.table) %in% rownames(L.table))){
return (all(as.numeric(delta.table) <= as.numeric(L.table[rownames(delta.table)])))
}
else return (FALSE)
}
test.L <- c(2, 2, 3, 3, 4, 5, 6, 7, 8)#, 10)
X <- c(0, 10)
a <- c()
a <- Place(test.L,X, 10, a)
a
PartialDigest <- function(L){
width <- max(L)
X <- c(0, width)
Place(L[-which.max(L)], X, width)
}
Place <- function(L, X, width, sol){
if(length(L) == 0) {
sol <- rbind(sol, X)
return(sol)
}
y <- max(L)
delta.yl <- abs(X - y)
if (check.sub(delta.yl, L)){
X <- c(X, y)
for (i in delta.yl){
L <- L[-which(L == i)[1]]
}
sol <- Place(L, X, width, sol)
X <- X[-which(X == y)[1]]
L <- c(L, delta.yl)
}
delta.wyl <- abs(X - width + y)
if (check.sub(delta.wyl, L)){
X <- c(X, width - y)
for (i in delta.wyl){
L <- L[-which(L == i)[1]]
}
#     print("L in case 1")
#     print(L)
#     print(X)
sol <- Place(L, X, width, sol)
X <- X[-which(X == width - y)[1]]
L <- c(L, delta.wyl)
}
return(sol)
}
check.sub <- function(delta.xl, L){
delta.table <- table(delta.xl)
L.table <- table(L)
if (all(rownames(delta.table) %in% rownames(L.table))){
return (all(as.numeric(delta.table) <= as.numeric(L.table[rownames(delta.table)])))
}
else return (FALSE)
}
test.L <- c(2, 2, 3, 3, 4, 5, 6, 7, 8)#, 10)
X <- c(0, 10)
a <- c()
a <- Place(test.L,X, 10, a)
a
PartialDigest(L)
PartialDigest <- function(L){
width <- max(L)
X <- c(0, width)
sol <- NULL
sol <- Place(L[-which.max(L)], X, width, sol)
return (sol)
}
Place <- function(L, X, width, sol){
if(length(L) == 0) {
sol <- rbind(sol, X)
return(sol)
}
y <- max(L)
delta.yl <- abs(X - y)
if (check.sub(delta.yl, L)){
X <- c(X, y)
for (i in delta.yl){
L <- L[-which(L == i)[1]]
}
sol <- Place(L, X, width, sol)
X <- X[-which(X == y)[1]]
L <- c(L, delta.yl)
}
delta.wyl <- abs(X - width + y)
if (check.sub(delta.wyl, L)){
X <- c(X, width - y)
for (i in delta.wyl){
L <- L[-which(L == i)[1]]
}
#     print("L in case 1")
#     print(L)
#     print(X)
sol <- Place(L, X, width, sol)
X <- X[-which(X == width - y)[1]]
L <- c(L, delta.wyl)
}
return(sol)
}
check.sub <- function(delta.xl, L){
delta.table <- table(delta.xl)
L.table <- table(L)
if (all(rownames(delta.table) %in% rownames(L.table))){
return (all(as.numeric(delta.table) <= as.numeric(L.table[rownames(delta.table)])))
}
else return (FALSE)
}
test.L <- c(2, 2, 3, 3, 4, 5, 6, 7, 8)#, 10)
L <- c(2, 2, 3, 3, 4, 5, 6, 7, 8, 10)
X <- c(0, 10)
a <- c()
a <- Place(test.L,X, 10, a)
PartialDigest(L)
PartialDigest <- function(L){
width <- max(L)
X <- c(0, width)
sol <- NULL
sol <- Place(L[-which.max(L)], X, width, sol)
return (sol)
}
Place <- function(L, X, width, sol){
if(length(L) == 0) {
sol <- rbind(sol, X)
return(sol)
}
y <- max(L)
delta.yl <- abs(X - y)
if (check.sub(delta.yl, L)){
X <- c(X, y)
for (i in delta.yl){
L <- L[-which(L == i)[1]]
}
sol <- Place(L, X, width, sol)
X <- X[-which(X == y)[1]]
L <- c(L, delta.yl)
}
delta.wyl <- abs(X - width + y)
if (check.sub(delta.wyl, L)){
X <- c(X, width - y)
for (i in delta.wyl){
L <- L[-which(L == i)[1]]
}
#     print("L in case 1")
#     print(L)
#     print(X)
sol <- Place(L, X, width, sol)
X <- X[-which(X == width - y)[1]]
L <- c(L, delta.wyl)
}
return(sol)
}
check.sub <- function(delta.xl, L){
delta.table <- table(delta.xl)
L.table <- table(L)
if (all(rownames(delta.table) %in% rownames(L.table))){
return (all(as.numeric(delta.table) <= as.numeric(L.table[rownames(delta.table)])))
}
else return (FALSE)
}
L <- c(2, 2, 3, 3, 4, 5, 6, 7, 8, 10)
PartialDigest(L)
PartialDigest <- function(L){
width <- max(L)
X <- c(0, width)
sol <- NULL
sol <- Place(L[-which.max(L)], X, width, sol)
return (sol)
}
Place <- function(L, X, width, sol){
if(length(L) == 0) {
sol <- rbind(sol, X)
return(sol)
}
y <- max(L)
delta.yl <- abs(X - y)
if (check.sub(delta.yl, L)){
X <- c(X, y)
for (i in delta.yl){
L <- L[-which(L == i)[1]]
}
sol <- Place(L, X, width, sol)
X <- X[-which(X == y)[1]]
L <- c(L, delta.yl)
}
delta.wyl <- abs(X - width + y)
if (check.sub(delta.wyl, L)){
X <- c(X, width - y)
for (i in delta.wyl){
L <- L[-which(L == i)[1]]
}
sol <- Place(L, X, width, sol)
X <- X[-which(X == width - y)[1]]
L <- c(L, delta.wyl)
}
return(sol)
}
check.sub <- function(delta.xl, L){
delta.table <- table(delta.xl)
L.table <- table(L)
if (all(rownames(delta.table) %in% rownames(L.table))){
return (all(as.numeric(delta.table) <= as.numeric(L.table[rownames(delta.table)])))
}
else return (FALSE)
}
L.test <- c(2, 2, 3, 3, 4, 5, 6, 7, 8, 10)
PartialDigest(L.test)
L <- c(1, 2,3,3,4,5,5,6,7,9,9,10,12,14,15)
PartialDigest(L)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
paralog
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
filtered.pairs <- rownames(read.table("/Users/xji3/Genconv/NewClusterPackRun/Yeast14pairs", row.names = 2))
lnL.increase.mat[filtered.pairs, ]
Tau.diff.mat[filtered.pairs, ]
library(xtable)
print(latex.table.1, floating = FALSE)
filtered.pairs <- rownames(read.table("/Users/xji3/Genconv/NewClusterPackRun/Yeast14pairs", row.names = 2))
lnL.increase.mat[filtered.pairs, ]
Tau.diff.mat[filtered.pairs, ]
library(xtable)
report.mat <- cbin(Tau.diff.mat[filtered.pairs, c(1, 2)], lnL.increase.mat[filtered.pairs, 3])
report.mat
latex.report.mat <- xtable(report.mat)
print(report.mat, floating = FALSE)
report.mat <- cbind(Tau.diff.mat[filtered.pairs, c(1, 2)], lnL.increase.mat[filtered.pairs, 3])
report.mat
filtered.pairs <- rownames(read.table("/Users/xji3/Genconv/NewClusterPackRun/Yeast14pairs", row.names = 2))
lnL.increase.mat[filtered.pairs, ]
Tau.diff.mat[filtered.pairs, ]
library(xtable)
report.mat <- cbind(Tau.diff.mat[filtered.pairs, c(1, 2)], lnL.increase.mat[filtered.pairs, 3])
colnames(report.mat) <- c("Tau in scenario A", "Tau in scenario B", "lnL difference (A - B)")
report.mat
latex.report.mat <- xtable(report.mat)
print(report.mat, floating = FALSE)
print(latex.report.mat, floating = FALSE)
